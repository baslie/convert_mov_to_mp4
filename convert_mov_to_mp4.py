#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ MOV –≤ MP4 —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Windows
–°–æ–≤–º–µ—Å—Ç–∏–º —Å Python 3.13
"""

import os
import sys
from pathlib import Path
from moviepy.editor import VideoFileClip
import time


def format_time(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π –≤–∏–¥"""
    if seconds < 60:
        return f"{seconds:.1f}—Å"
    elif seconds < 3600:
        return f"{int(seconds//60)}–º {int(seconds%60)}—Å"
    else:
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        seconds = int(seconds % 60)
        return f"{hours}—á {minutes}–º {seconds}—Å"


def get_unique_mov_files(folder_path):
    """–ü–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ MOV —Ñ–∞–π–ª—ã, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑-–∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞"""
    folder = Path(folder_path)
    
    # –í Windows *.mov –∏ *.MOV –Ω–∞—Ö–æ–¥—è—Ç –æ–¥–Ω–∏ —Ñ–∞–π–ª—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–∞—Ç—Ç–µ—Ä–Ω
    mov_files = list(folder.glob('*.mov'))
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã (–Ω–∞ —Å–ª—É—á–∞–π Linux)
    if not mov_files:
        mov_files = list(folder.glob('*.MOV'))
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –ø—É—Ç–∏
    unique_files = {}
    for file in mov_files:
        abs_path = str(file.resolve()).lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        if abs_path not in unique_files:
            unique_files[abs_path] = file
    
    return list(unique_files.values())


def convert_mov_to_mp4_lossless(input_path, output_path=None, method='high_quality'):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç MOV —Ñ–∞–π–ª –≤ MP4 —Ñ–æ—Ä–º–∞—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    
    Args:
        input_path (str): –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É MOV —Ñ–∞–π–ª—É
        output_path (str, optional): –ü—É—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ MP4 —Ñ–∞–π–ª–∞
        method (str): –ú–µ—Ç–æ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ('lossless', 'high_quality', 'copy_streams')
    
    Returns:
        bool: True –µ—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    """
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if not os.path.exists(input_path):
            print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {input_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
        if output_path is None:
            input_file = Path(input_path)
            output_path = str(input_file.with_suffix('.mp4'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        if os.path.exists(output_path):
            response = input(f"‚ö†Ô∏è  –§–∞–π–ª {os.path.basename(output_path)} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/n): ").lower()
            if response != 'y':
                print("‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª")
                return True
        
        print(f"üé¨ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é: {os.path.basename(input_path)}")
        print(f"üìÅ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {os.path.basename(output_path)}")
        print(f"üéØ –ú–µ—Ç–æ–¥: {method}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª
        print("üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª...")
        video_clip = VideoFileClip(input_path)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        duration = video_clip.duration
        fps = video_clip.fps
        size = video_clip.size
        print(f"‚ÑπÔ∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {format_time(duration)} | FPS: {fps:.1f} | –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {size[0]}x{size[1]}")
        
        # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        file_size_mb = os.path.getsize(input_path) / 1024 / 1024
        estimated_time = duration * 0.3  # –ü—Ä–∏–º–µ—Ä–Ω–æ 30% –æ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ
        print(f"‚è±Ô∏è  –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {format_time(estimated_time)}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        if method == 'lossless':
            ffmpeg_params = [
                '-preset', 'slow',
                '-crf', '0',  # Lossless H.264
                '-threads', str(os.cpu_count()),
                '-movflags', '+faststart',
                '-pix_fmt', 'yuv420p'
            ]
            print("üîß –†–µ–∂–∏–º: –ë–µ–∑ –ø–æ—Ç–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–∞ (lossless) - —Ñ–∞–π–ª –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –±–æ–ª—å—à–µ!")
            
        elif method == 'high_quality':
            ffmpeg_params = [
                '-preset', 'slow',
                '-crf', '15',  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                '-threads', str(os.cpu_count()),
                '-movflags', '+faststart',
                '-pix_fmt', 'yuv420p'
            ]
            print("üîß –†–µ–∂–∏–º: –û—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (CRF 15)")
            
        elif method == 'copy_streams':
            ffmpeg_params = [
                '-c:v', 'copy',  # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫
                '-c:a', 'copy',  # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫
                '-movflags', '+faststart'
            ]
            print("üîß –†–µ–∂–∏–º: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤ (–±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è)")
            
        else:
            ffmpeg_params = [
                '-preset', 'slow',
                '-crf', '18',  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                '-threads', str(os.cpu_count()),
                '-movflags', '+faststart'
            ]
            print("üîß –†–µ–∂–∏–º: –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (CRF 18)")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–µ–∫–∏
        if method == 'copy_streams':
            video_codec = None
            audio_codec = None
        else:
            video_codec = 'libx264'
            audio_codec = 'aac'
        
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é...")
        print("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –Ω–∏–∂–µ:")
        start_time = time.time()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º MoviePy
        video_clip.write_videofile(
            output_path,
            codec=video_codec,
            audio_codec=audio_codec,
            ffmpeg_params=ffmpeg_params,
            verbose=True,    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            logger='bar'     # –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä MoviePy
        )
        
        conversion_time = time.time() - start_time
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–ø –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
        video_clip.close()
        
        print(f"\n‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {format_time(conversion_time)}")
        print(f"üìä –†–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {os.path.getsize(input_path) / 1024 / 1024:.2f} –ú–ë")
        print(f"üìä –†–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {os.path.getsize(output_path) / 1024 / 1024:.2f} –ú–ë")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
        original_size = os.path.getsize(input_path)
        converted_size = os.path.getsize(output_path)
        ratio = (converted_size / original_size) * 100
        print(f"üìà –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤: {ratio:.1f}% –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞")
        
        # –°–∫–æ—Ä–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        speed_ratio = duration / conversion_time
        print(f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {speed_ratio:.1f}x (1x = —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {str(e)}")
        return False


def list_mov_files(folder_path):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ MOV —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    mov_files = get_unique_mov_files(folder_path)
    
    if mov_files:
        print(f"\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ MOV —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ:")
        total_size = 0
        for i, file in enumerate(sorted(mov_files, key=lambda x: x.name), 1):
            size_mb = file.stat().st_size / 1024 / 1024
            total_size += size_mb
            print(f"   {i}. {file.name} ({size_mb:.2f} –ú–ë)")
        
        print(f"\nüìä –ò—Ç–æ–≥–æ: {len(mov_files)} —Ñ–∞–π–ª–∞(–æ–≤), –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size:.2f} –ú–ë")
    
    return mov_files


def batch_convert_lossless(input_folder, output_folder=None, method='high_quality'):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ MOV —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞
    """
    
    if output_folder is None:
        output_folder = input_folder
    
    # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(output_folder, exist_ok=True)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    mov_files = list_mov_files(input_folder)
    
    if not mov_files:
        print("‚ùå MOV —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ")
        return
    
    print(f"\nüé¨ –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(mov_files)} MOV —Ñ–∞–π–ª(–æ–≤)")
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ").lower()
    if response != 'y':
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return
    
    success_count = 0
    start_time = time.time()
    
    for i, mov_file in enumerate(mov_files, 1):
        print(f"\n{'='*60}")
        print(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª {i}/{len(mov_files)}: {mov_file.name}")
        print(f"{'='*60}")
        
        output_file = Path(output_folder) / f"{mov_file.stem}.mp4"
        
        if convert_mov_to_mp4_lossless(str(mov_file), str(output_file), method):
            success_count += 1
            print(f"‚úÖ –§–∞–π–ª {i}/{len(mov_files)} –∑–∞–≤–µ—Ä—à–µ–Ω")
        else:
            print(f"‚ùå –§–∞–π–ª {i}/{len(mov_files)} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å")
    
    total_time = time.time() - start_time
    print(f"\nüéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count}/{len(mov_files)} —Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ")
    print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {format_time(total_time)}")
    
    if success_count == len(mov_files):
        print("üéä –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
    elif success_count > 0:
        print(f"‚ö†Ô∏è  {len(mov_files) - success_count} —Ñ–∞–π–ª(–æ–≤) –ø—Ä–æ–ø—É—â–µ–Ω–æ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –º–µ–Ω—é"""
    
    print("üé¨ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä MOV ‚Üí MP4 (–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞)")
    print("=" * 60)
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
        print("1. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª")
        print("2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ")
        print("3. –ü–æ–∫–∞–∑–∞—Ç—å MOV —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ")
        print("4. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()
        
        if choice == '1':
            input_file = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ MOV —Ñ–∞–π–ª—É: ").strip().strip('"')
            if input_file:
                print("\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
                print("1. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤ (–±—ã—Å—Ç—Ä–æ, –µ—Å–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ)")
                print("2. –û—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ CRF 15 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")  
                print("3. –ë–µ–∑ –ø–æ—Ç–µ—Ä—å CRF 0 (–±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä)")
                print("4. –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ CRF 18")
                
                method_choice = input("–ú–µ—Ç–æ–¥ (1-4) [2]: ").strip() or '2'
                
                method_map = {
                    '1': 'copy_streams',
                    '2': 'high_quality', 
                    '3': 'lossless',
                    '4': 'standard_high'
                }
                
                method = method_map.get(method_choice, 'high_quality')
                convert_mov_to_mp4_lossless(input_file, method=method)
        
        elif choice == '2':
            input_folder = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å MOV —Ñ–∞–π–ª–∞–º–∏: ").strip().strip('"')
            if input_folder:
                print("\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
                print("1. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤ (–±—ã—Å—Ç—Ä–æ)")
                print("2. –û—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ CRF 15 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")  
                print("3. –ë–µ–∑ –ø–æ—Ç–µ—Ä—å CRF 0 (–±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä)")
                
                method_choice = input("–ú–µ—Ç–æ–¥ (1-3) [2]: ").strip() or '2'
                
                method_map = {
                    '1': 'copy_streams',
                    '2': 'high_quality', 
                    '3': 'lossless'
                }
                
                method = method_map.get(method_choice, 'high_quality')
                batch_convert_lossless(input_folder, method=method)
        
        elif choice == '3':
            input_folder = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ: ").strip().strip('"')
            if input_folder:
                list_mov_files(input_folder)
        
        elif choice == '4':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")


if __name__ == "__main__":
    main()
